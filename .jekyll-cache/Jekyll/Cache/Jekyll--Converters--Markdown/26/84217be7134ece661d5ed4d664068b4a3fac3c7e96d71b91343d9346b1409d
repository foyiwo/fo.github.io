I"&<p>这篇文章要解决的问题是我在阅读SpringBoot源码时，遇到的一段代码：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public SpringApplication(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources) {
		......

		setInitializers((Collection) getSpringFactoriesInstances(
				ApplicationContextInitializer.class));

		......
	}	
</code></pre></div></div>
<p>里面是设置Spring的初始化器，而初始化器的数据来源是<code class="highlighter-rouge">getSpringFactoriesInstances</code>函数</p>

<p>点击<code class="highlighter-rouge">getSpringFactoriesInstances</code>进去里面看一下：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>private &lt;T&gt; Collection&lt;T&gt; getSpringFactoriesInstances(Class&lt;T&gt; type,
			Class&lt;?&gt;[] parameterTypes, Object... args) {
		//获取类加载器
		ClassLoader classLoader = getClassLoader();
		
		//获取类的全限定名
		Set&lt;String&gt; names = new LinkedHashSet&lt;&gt;(
				SpringFactoriesLoader.loadFactoryNames(type, classLoader));
		
		//根据类的全限定名，通过反射创建对象
		List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,
				classLoader, args, names);
		
		//排序
		AnnotationAwareOrderComparator.sort(instances);
		return instances;
	}
</code></pre></div></div>

<p>该方法分四步进行</p>

<ol>
  <li>获取类加载器</li>
  <li>根据传入的类的类型，获取类的全限定名列表</li>
  <li>通过类的全限定名，利用反射进行调用</li>
  <li>排序</li>
</ol>

<p>而这四步之中，第二步是最重要的，再点进去看看</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader) {
        String factoryClassName = factoryClass.getName();
        return (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());
    }
</code></pre></div></div>

<p>该方法的逻辑分两步：</p>

<ol>
  <li>调用<code class="highlighter-rouge">loadSpringFactories(classLoader)</code>方法，获得一个List</li>
  <li>调用List.getOrDefault()按传入的类的类型进行筛选</li>
</ol>

<p>所以，核心的是loadSpringFactories(classLoader)方法，进去看看:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) {
        MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);
        if (result != null) {
            return result;
        } else {
            try {
                Enumeration&lt;URL&gt; urls = classLoader != null ? classLoader.getResources("META-INF/spring.factories") : ClassLoader.getSystemResources("META-INF/spring.factories");
                LinkedMultiValueMap result = new LinkedMultiValueMap();

                while(urls.hasMoreElements()) {
                    URL url = (URL)urls.nextElement();
                    UrlResource resource = new UrlResource(url);
                    Properties properties = PropertiesLoaderUtils.loadProperties(resource);
                    Iterator var6 = properties.entrySet().iterator();

                    while(var6.hasNext()) {
                        Entry&lt;?, ?&gt; entry = (Entry)var6.next();
                        String factoryClassName = ((String)entry.getKey()).trim();
                        String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());
                        int var10 = var9.length;

                        for(int var11 = 0; var11 &lt; var10; ++var11) {
                            String factoryName = var9[var11];
                            result.add(factoryClassName, factoryName.trim());
                        }
                    }
                }

                //将加载的数据放入缓存
                cache.put(classLoader, result);
                return result;
            } catch (IOException var13) {
                throw new IllegalArgumentException("Unable to load factories from location [META-INF/spring.factories]", var13);
            }
        }
    }
</code></pre></div></div>

<p>该方法相比比较复杂，先见名思意：</p>

<p><code class="highlighter-rouge">loadSpringFactories</code>:load是装载的意思，所以该方法就是：装载SpringFactories，那么<code class="highlighter-rouge">SpringFactories</code>又是什么呢？</p>

<hr />

<p><code class="highlighter-rouge">SpringFactories</code>代表着ClassPath路径下<code class="highlighter-rouge">META-INF/spring.factories</code>文件，这个文件可不一般，它背后是SpringBoot实现的一套服务发现机制。</p>

<p>而springboot的starter机制正是基于该机制完成的！</p>

<h4 id="springfactories机制原理"><code class="highlighter-rouge">spring.factories</code>机制原理</h4>

<p><code class="highlighter-rouge">spring.factories</code>是SpringBoot中内置的一套用于方便扩展的解耦机制。这种机制其实是仿照Java的SPI机制。</p>

<p>参与该机制有三个角色</p>

<ol>
  <li>服务调用方：Spring框架，他是该机制的所服务的对象</li>
  <li>解耦中间商：<code class="highlighter-rouge">META-INF/spring.factories</code>文件，是该机制的中间者</li>
  <li>服务提供方：如<code class="highlighter-rouge">Mybatic</code>框架实现的<code class="highlighter-rouge">starter</code></li>
</ol>

<p>该机制的大致流程如下：</p>

<p><code class="highlighter-rouge">服务提供方</code>和<code class="highlighter-rouge">服务调用方</code>不直接耦合，而是通过一个中间文件<code class="highlighter-rouge">spring.factories</code>进行解耦。</p>

<p><code class="highlighter-rouge">服务调用方</code>定义了一个通过接口，然后<code class="highlighter-rouge">服务提供方</code>实现该接口后，把实现类的路径回写到<code class="highlighter-rouge">spring.factories</code>文件里，<code class="highlighter-rouge">服务调用方</code>再去该文件调用服务。</p>

<p>这样做的好处是，<code class="highlighter-rouge">服务调用方</code>完全不用知道是谁提供服务，他只负责去<code class="highlighter-rouge">spring.factories</code>里搜索即可。</p>

<hr />

<p>回到正文，搞清楚了<code class="highlighter-rouge">SpringFactories</code>是什么之后，该方法就不难理解了，其实就是Springcore提供的一个访问<code class="highlighter-rouge">spring.factories</code>的工具类</p>

<p>为了更加立体一点，下面我找了springboot本身提供的<code class="highlighter-rouge">spring.factories</code>文件代码和Mybatic提供的<code class="highlighter-rouge">spring.factories</code>文件代码</p>

<h4 id="springboot">SpringBoot</h4>
<p>在github上看的springboot源码</p>

<p>项目路径：<code class="highlighter-rouge">spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories</code></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Initializers
org.springframework.context.ApplicationContextInitializer=\
org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\
org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener

# Application Listeners
org.springframework.context.ApplicationListener=\
org.springframework.boot.autoconfigure.BackgroundPreinitializer

...........
</code></pre></div></div>

<h4 id="mybatic">Mybatic</h4>

<p>这是我从springboot项目打包的jar里的lib文件夹里找到的</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Auto Configure
org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration
</code></pre></div></div>

<p>当我debug我这项目时，发现它加载了以下的所有<code class="highlighter-rouge">spring.factories</code>文件，
足以说明其机制</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>file:/C:/***/com/alibaba/druid-spring-boot-starter/1.1.10/druid-spring-boot-starter-1.1.10.jar!/META-INF/spring.factories

file:/C:/***/org/springframework/boot/spring-boot-autoconfigure/2.1.3.RELEASE/spring-boot-autoconfigure-2.1.3.RELEASE.jar!/META-INF/spring.factories

file:/C:/***/org/mybatis/spring/boot/mybatis-spring-boot-autoconfigure/1.3.2/mybatis-spring-boot-autoconfigure-1.3.2.jar!/META-INF/spring.factories

file:/C:/***/com/github/pagehelper/pagehelper-spring-boot-autoconfigure/1.2.10/pagehelper-spring-boot-autoconfigure-1.2.10.jar!/META-INF/spring.factories

file:/C:/***/org/springframework/data/spring-data-commons/2.1.5.RELEASE/spring-data-commons-2.1.5.RELEASE.jar!/META-INF/spring.factories

file:/C:/***/org/springframework/spring-beans/5.1.5.RELEASE/spring-beans-5.1.5.RELEASE.jar!/META-INF/spring.factories

file:/C:/***/org/springframework/boot/spring-boot/2.1.3.RELEASE/spring-boot-2.1.3.RELEASE.jar!/META-INF/spring.factories

file:/C:/***/org/springframework/boot/spring-boot-actuator-autoconfigure/2.1.3.RELEASE/spring-boot-actuator-autoconfigure-2.1.3.RELEASE.jar!/META-INF/spring.factories
</code></pre></div></div>

<p>下面这张图是<code class="highlighter-rouge">loadSpringFactories</code>方法加载完之后，得到的数据，可以看到都是类的路径名</p>

<p><img src="/images/blogs/spring.factories.png" alt="" /></p>

:ET